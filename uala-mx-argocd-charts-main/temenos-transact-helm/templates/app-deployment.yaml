{{- $mountPath := .Values.mount.path -}}
{{- $dot := . }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "transact.fullname" . }}{{ "-app" }}
  labels:
    app.kubernetes.io/name: {{ include "transact.name" . }}{{ "-app" }}
    helm.sh/chart: {{ include "transact.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.appReplicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- if .Values.temnmonitor.enabled }}
          sidecar.opentelemetry.io/inject: "temnmonitor/otel-sidecar"
          prometheus.io/port: "8889"
          prometheus.io/scrape: "true"
        {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
    spec:
      {{- if eq .Values.environment "eks" }}
      serviceAccountName: {{ include "serviceaccount.app.name" . | quote }}
      {{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ include "transact.name" . }}{{ "-app" }}
              topologyKey: topology.kubernetes.io/zone
            weight: 100
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - {{ include "transact.name" . }}{{ "-app" }}
              topologyKey: topology.kubernetes.io/hostname
            weight: 100
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ include "app.image" . | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}
        envFrom:
        - configMapRef:
            name: jboss-config
        env:
        {{- if .Values.temnmonitor.enabled }}
        - name: TEMN_MONITOR
          value: "true"
        - name: TAFJ_appender
          value: "monitoring"
        - name: Appender_Host_Name
          value: "temnmonitor-logstash.temnmonitor.svc.cluster.local"
        {{- else }}
        - name: TEMN_MONITOR
          value: "false"
        - name: TAFJ_appender
          value: "k8s"
        - name: Appender_Host_Name
          value: ""
        {{- end }}
        {{- if .Values.keycloak.enabled }}      
        - name: KC_ISSUER
          value: {{ .Values.keycloak.issuer | quote }}
        - name: KC_PRINCIPALCLAIM
          value: {{ .Values.keycloak.principalclaim | quote }}
        - name: KC_PKENCODED
          valueFrom:
            secretKeyRef:
              name: externals
              key: keycloakpkencoded
        {{- end }}
        - name: BRP_HOME
          value: "/srv/Temenos"
        # UXP logs
        - name: LOG_HOME
          value: "/srv/Temenos/logs"
        - name: APP_USER
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: appuser
        - name: APP_PWD
          valueFrom:
            secretKeyRef:
              name: externals
              key: app_password
        - name: DB_URL
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: dburl
        - name: DB_USER
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: dbuser
        {{- if ne .Values.database.type "PostgreSQLawsWrapper" }}
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: externals
              key: db_password
        {{- end }}
        - name: ENV_PREFIX
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: envprefix
        - name: EDGE_PROP
          value: {{ .Values.edgeProp | default "SystemTestProperties" }}                 
        - name: JAVA_OPTS
          value: {{ include "java.opts.app" . | quote }}
        - name: JMS_URL
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: jmsurl
        - name: JMS_USER
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: jmsuser
        {{- if .Values.mq.password }}
        - name: JMS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: externals
              key: jms_password
        {{- end }}
        - name: JBOSS_PWD
          valueFrom:
            secretKeyRef:
              name: externals
              key: jbossAdminPassword
        - name: IDLE_TIMEOUT_VALUE
          value: {{ .Values.jboss.IDLE_TIMEOUT_VALUE | quote }}              
        {{- if eq .Values.environment "aks" }}
        - name: temn.msf.stream.kafka.sasl.jaas.config
          value: {{ .Values.eventhub.jaas_config | quote }}
        {{- end }}
        - name: OLTP_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: oltpactive
        - name: SERVICE_ACTIVE
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: serviceactive
        {{- if .Values.deployTE.enabled }}
        - name: TB_HELPTEXT_LOCATION
          value: {{ .Values.deployTE.TB_HELPTEXT_LOCATION  }}
        {{- end }}
        {{- if .Values.ssl.enabled }}
        - name: SSL_FILENAME
          valueFrom:
            configMapKeyRef:
              name: transact-config
              key: ssl_filename
        - name: SSL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: externals
              key: ssl_password  
        {{- end }}
        {{- with .Values.env }}
          {{- toYaml . | nindent 10 }}
        {{- end }}              
        resources:
          requests:
            cpu: {{ .Values.requests.app.cpu }}
            memory: {{ .Values.requests.app.memory }}
          limits:
            cpu: {{ .Values.limits.app.cpu }}
            memory: {{ .Values.limits.app.memory }}
        ports:
        - name: app
          containerPort: 8080
          protocol: TCP
        {{- if .Values.jboss.console.exposed }}
        - name: console
          containerPort: 9990
          protocol: TCP
        {{- end }}
        {{- if .Values.ssl.enabled }}
        - name: https
          containerPort: 8443
          protocol: TCP
        {{- end }}
        readinessProbe:
          httpGet:
            path: /
            {{- if .Values.ssl.enabled }}
            port: 8443
            scheme: HTTPS
            {{- else }}
            port: 8080
            {{- end }}
          periodSeconds: 30
          timeoutSeconds: 30
        volumeMounts:
        {{- if .Values.ssl.enabled }}
          - name: ssl-cert
            mountPath: {{ "/opt/jboss/wildfly/standalone/configuration/" }}{{ .Values.ssl.filename }}
            subPath: {{ .Values.ssl.filename }}
        {{- end }}
        {{- if eq .Values.environment "aks" }}
        {{- range $shareName := (splitList "@" .Values.share.names) }}
          - name: {{ $shareName }}
          {{- if eq $shareName "dbtools" }}
            mountPath: "{{ "/" }}{{ $shareName }}"
          {{- else }}
            mountPath: "{{ $mountPath }}{{ $shareName }}"
          {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.akv.enabled }}
          - name: secrets-store
            mountPath: "/mnt/secrets-store"
            readOnly: true
        {{- end }}
        {{- if eq .Values.environment "eks" }}
          - name: transact-volume
            mountPath: "{{ .Values.mount.path }}"
        {{- end }}
      volumes:
      {{- if .Values.ssl.enabled }}
        - name: ssl-cert
          secret:
            secretName: ssl-secret
      {{- end }}
      {{- if eq .Values.environment "aks" }}
      {{- range $shareName := (splitList "@" .Values.share.names) }}  
        - name: {{ $shareName }}
          azureFile:
            secretName: {{ include "transact.name" $dot }}{{ "-secret" }}
            shareName: {{ $shareName }}
            readOnly: false
      {{- end }}
      {{- end }}
      {{- if eq .Values.environment "eks"  }}
        - name: transact-volume
          persistentVolumeClaim:
            claimName: {{ .Values.volumes.claimname }}
      {{- end }}
      # TODO: EBS CSI driver for EKS
      {{- if .Values.akv.enabled }}
        - name: secrets-store
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: {{ include "transact.fullname" . }}{{ "-kvsecret" }}
      {{- end }}